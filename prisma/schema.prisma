generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String   @id @default(uuid())
  firstName               String
  lastName                String
  email                   String   @unique
  password                String
  phoneNumber             String?
  nationalCode            String?
  birthDate               DateTime?
  gender                  String?
  isVerified              Boolean  @default(false)
  verificationCode        String?
  verificationCodeExpires DateTime?
  role                    String   @default("USER")
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  addresses               Address[]
  cart                    Cart?
  orders                  Order[]
  refreshTokens           RefreshToken[]
  reviews                 Review[]
  userCoupons             UserCoupon[]
  wishlist                Wishlist[]
  returnRequests          ReturnRequest[]

  @@index([email])
  @@index([phoneNumber])
  @@index([createdAt])
  @@index([isVerified])
  @@map("users")
}

model RefreshToken {
  id           String   @id @default(uuid())
  tokenHash    String
  device       String?
  ip           String?
  expiresAt    DateTime
  revoked      Boolean  @default(false)
  replacedById String?
  userId       String
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([tokenHash])
  @@index([revoked])
  @@map("refresh_tokens")
}

model Product {
  id                String    @id @default(uuid())
  name              String
  brand             String?
  description       String?
  price             Float
  discountPercent   Int       @default(0)
  stock             Int       @default(0)
  imageUrl          String?
  salesCount        Int       @default(0)
  isFeatured        Boolean   @default(false)
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  categoryId        String?
  updatedAt         DateTime  @updatedAt
  version           Int       @default(0)
  discountExpiresAt DateTime?
  isFlashSale       Boolean   @default(false)
  flashSaleEndsAt   DateTime?
  cartItems         CartItem[]
  orderItems        OrderItem[]
  colors            ProductColor[]
  sizes             ProductSize[]
  category          Category? @relation(fields: [categoryId], references: [id])
  reviews           Review[]
  wishlist          Wishlist[]

  @@unique([id, version])
  @@index([categoryId])
  @@index([brand])
  @@index([isFeatured])
  @@index([isActive])
  @@index([createdAt])
  @@index([price])
  @@index([stock])
  @@index([salesCount])
  @@index([discountPercent])
  @@index([discountExpiresAt])
  @@index([isFlashSale])
  @@index([flashSaleEndsAt])
  @@index([version])
  @@map("products")
}

model ProductSize {
  id        String  @id @default(uuid())
  productId String
  size      String
  stock     Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, size])
  @@index([productId])
  @@index([size])
  @@index([stock])
  @@map("product_sizes")
}

model ProductColor {
  id        String  @id @default(uuid())
  productId String
  color     String
  colorCode String
  imageUrl  String?
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, color])
  @@index([productId])
  @@index([color])
  @@index([colorCode])
  @@map("product_colors")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  imageUrl    String?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@index([name])
  @@map("categories")
}

model Banner {
  id        String   @id @default(uuid())
  title     String
  imageUrl  String
  link      String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive])
  @@index([createdAt])
  @@map("banners")
}

model Cart {
  id        String     @id @default(uuid())
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
  user      User       @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  size      String?
  color     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@index([cartId])
  @@index([productId])
  @@index([createdAt])
  @@map("cart_items")
}

model Order {
  id                 String        @id @default(uuid())
  userId             String
  total              Float
  status             String        @default("PENDING")
  address            String
  createdAt          DateTime      @default(now())
  orderCode          String        @unique
  updatedAt          DateTime      @updatedAt
  cancellationReason String?
  couponId           String?
  discountAmount     Float?
  estimatedDelivery  DateTime?
  shippingMethod     String?
  trackingNumber     String?
  paymentMethod      String        @default("ONLINE")
  items              OrderItem[]
  coupon             Coupon?       @relation(fields: [couponId], references: [id])
  user               User          @relation(fields: [userId], references: [id])
  returnRequests     ReturnRequest[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@index([orderCode])
  @@index([total])
  @@index([trackingNumber])
  @@index([paymentMethod])
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  size      String?
  color     String?
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
  returnItems ReturnItem[]

  @@index([orderId])
  @@index([productId])
  @@index([createdAt])
  @@map("order_items")
}

model Review {
  id            String   @id @default(uuid())
  userId        String
  productId     String
  rating        Int
  text          String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  adminResponse String?
  helpfulCount  Int      @default(0)
  isApproved    Boolean  @default(false)
  product       Product  @relation(fields: [productId], references: [id])
  user          User     @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([productId])
  @@index([createdAt])
  @@index([rating])
  @@index([isApproved])
  @@map("reviews")
}

model Address {
  id             String   @id @default(uuid())
  userId         String
  title          String   @default("آدرس اصلی")
  province       String
  city           String
  postalCode     String
  address        String
  recipientName  String
  recipientPhone String
  isDefault      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  latitude       Float?
  longitude      Float?
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isDefault])
  @@index([province, city])
  @@map("addresses")
}

model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([userId])
  @@index([productId])
  @@index([createdAt])
  @@map("wishlist")
}

model Coupon {
  id           String       @id @default(uuid())
  code         String       @unique
  discountType String
  value        Float
  minOrder     Float?
  maxDiscount  Float?
  usageLimit   Int?
  usedCount    Int          @default(0)
  expiresAt    DateTime?
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  orders       Order[]
  userCoupons  UserCoupon[]

  @@index([code])
  @@index([expiresAt])
  @@index([isActive])
  @@map("coupons")
}

model UserCoupon {
  id       String    @id @default(uuid())
  userId   String
  couponId String
  used     Boolean   @default(false)
  usedAt   DateTime?
  coupon   Coupon    @relation(fields: [couponId], references: [id], onDelete: Cascade)
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, couponId])
  @@index([userId])
  @@index([couponId])
  @@map("user_coupons")
}

model ReturnRequest {
  id           String   @id @default(uuid())
  orderId      String
  userId       String
  reason       String
  status       String   @default("PENDING")
  adminNotes   String?
  refundAmount Float?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  order        Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  returnItems  ReturnItem[]

  @@index([orderId])
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("return_requests")
}

model ReturnItem {
  id              String         @id @default(uuid())
  returnRequestId String
  orderItemId     String
  quantity        Int
  returnReason    String
  returnRequest   ReturnRequest @relation(fields: [returnRequestId], references: [id], onDelete: Cascade)
  orderItem       OrderItem     @relation(fields: [orderItemId], references: [id], onDelete: Cascade)

  @@index([returnRequestId])
  @@index([orderItemId])
  @@map("return_items")
}

model NewsletterSubscription {
  id        String   @id @default(uuid())
  email     String   @unique
  isActive  Boolean  @default(true)
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([isActive])
  @@map("newsletter_subscriptions")
}